---//$Id$//
====== Memory manager overview ======
Memory manager is definitely the most complicated component in the system. Major principles of memory management organization are borrowed from BSD.

Main functionality of memory manager is implemented in MM class. This class consist of many subclasses. ''MM::malloc'' and ''MM::mfree'' methods can be used to allocate and free memory blocks. ''NEW'' and ''DELETE'' macros should be used for objects creation and allocation. They use ''MM::OpNew'' and ''MM::OpDelete'' methods. ''NEWSINGLE'' macro can be used for object allocation to provide a hint to the system that there probably will be no many objects of this size allocated in the future. Without this hint the system uses [[components:kernel:slab_allocator|slab allocator]] to allocate the memory for the objects.

''MM::Map'' class represents virtual address space map. The map can have submaps which represent some areas in map with predefined ranges. The submaps could be used to limit allocations range in a map. The space in a map is managed using [[components:kernel:buddy_allocator|universal buddy allocator]]. Each allocated area is represented by ''MM::Map::Entry'' object. Usually a map entry is corresponding to reserved space entry (where no allocations permitted), a pure space entry or memory object. A memory object is represented by ''MM::VMObject'' class. An object is inserted in a map by ''MM::Map::InsertObject'' method and can be removed by ''MM::Map::Free'' method. An object can be inserted partially by specifying an offset and mapping size to ''MM::Map::InsertObject'' method.

''MM::Map::Allocate'' method allocates kernel virtual memory block and maps it to physical memory. ''MM::Map::AllocateSpace'' method allocates pure space in virtual space map. ''MM::Map::Free'' method can be used to free both types of space. ''MM::Map::ReserveSpace'' and ''MM::Map::UnReserveSpace'' methods allow space reservation in a map.

^ Virtual memory layout ^
| {{components:kernel:mem_layout.png|Phobos memory layout}} |
